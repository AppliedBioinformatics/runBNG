#!/bin/bash

# This script aims to help complete key Bionano OM analyses using command line
# ScriptName: runBNG 
# Last modified: 05/04/2021
# Copyright: Copyright (c) 2017 Applided Bioinformatics Group @UWA, Perth, Australia
#

###====================================== General configuration check ==========================================
##system check
if [ "$(uname)" == "Darwin" ]; then
    echo -e "\nWarning! Currently, '`basename $0`' is not supportted in MacOS system\n"; exit 1;
fi

##check readlink
RL=`which readlink`
if [[ ! -s "$RL" ]] || [[ ! -x "$RL" ]]; then
    echo -e "\nOops! It seems 'readlink' is not installed in your system or executable. Please check!\n"; exit 1;
fi

##check python
mypython=`which python2`
if [[ ! -s "$mypython" ]] || [[ ! -x "$mypython" ]]; then
    echo -e "\nOops! It seems 'python2' is not installed in your system or executable. Please check!\n"; exit 1;
fi

py_v=`python2 -c 'import sys; print(".".join(map(str, sys.version_info[:3])))'`
s1=`echo $py_v | cut -d"." -f1`
s2=`echo $py_v | cut -d"." -f2`
s3=`echo $py_v | cut -d"." -f3`

check=`awk '{ if ($1==2 && $2 ==7 && $3>=5) print "yes"}' <<< "$s1 $s2 $s3"`

if [[ $check != "yes" ]]; then
    echo -e "\nPlease set your default python2 to v2.7.5 or above\n"; exit 1;
fi

##check perl
myperl=`which perl`
if [[ ! -s "$myperl" ]] || [[ ! -x "$myperl" ]];then
    echo -e "\nOops! It seems 'perl' is not installed in your system or executable. Please check!\n"; exit 1;
fi

pl_v=`perl -e 'print $];'`

check1=`awk '{ if ($1 >=5.010 && $1 <5.011) print "yes"}' <<< "$pl_v"`
check2=`awk '{ if ($1 >=5.014 && $1 <5.015) print "yes"}' <<< "$pl_v"`
check3=`awk '{ if ($1 >=5.016 && $1 <5.017) print "yes"}' <<< "$pl_v"`

if [[ $check1 != "yes" ]] && [[ $check2 != "yes" ]] && [[ $check3 != "yes" ]]; then
    echo -e "\nPlease set your default Perl to v5.10.x, v5.14.x or v5.16.x\n"; exit 1;
fi

##check gcc
mygcc=`which gcc`

if [[ ! -s "$mygcc" ]] || [[ ! -x "$mygcc" ]]; then
    echo -e "\nOops! It seems 'gcc' is not installed in your system or executable. Please check!\n"; exit 1;
fi
currentver="$(gcc -dumpversion)"
requiredver="4.4.7"

if [ "$(printf "$requiredver\n$currentver" | sort -V | head -n1)" == "$currentver" ] && [ "$currentver" != "$requiredver" ]; then
    echo -e "\nPlease set your default GCC to v4.4.7 or above\n"; exit 1;
fi

##check glibc
myldd=`which ldd`

if [[ ! -s "$myldd" ]] || [[ ! -x "$myldd" ]]; then
    echo -e "\nOops! It seems 'glibc' is not installed in your system or execuatble. Please check!\n"; exit 1;
fi

currver=`ldd --version`
ver=`echo $currver | cut -d" " -f4`
check=`awk '{if($1>=2.15) print "yes"}' <<< "$ver"`

if [[ $check != "yes" ]];then
    echo -e "\nPlease set your default glibc to v2.15 or above\n"; exit 1;
fi

##======================================= Functions =========================================
function check_integer () {
    if ! [[ $1 =~ ^[0-9]+$ ]]; then
        echo -e "\nOpps! Your input '$1' is not an integer or smaller than 0. Please check!\n" 1>&2
        exit 1
    fi
}

check_option(){
    if [[ -z "$1" ]]; then
        echo -e "\nOops! One of the options: '$2' is missing. Please check!";
        $3; exit 1;
    fi
}

check_path(){
    myDir=`$RL -f $1`;
    if [[ ! -d "$myDir" ]] || [[ ! -w "$myDir" ]]; then
        echo -e "\nOops! It seems the directory '$myDir' is not existent or writable, please check!\n";
        exit 1;
    fi
}

check_file(){
    if [[ ! -s "$1" ]] || [[ ! -r "$1" ]]; then
        echo -e "\nOops! It seems file: '${1}' is not existent or readable. Please check!\n"
        exit 1
    fi
}

check_yesno(){
   if [[ "$1" != 'yes' ]] && [[ "$1" != 'no' ]]; then 
       echo -e "\nOops! Please use 'yes' or 'no' after the '$2' option\n"; exit 1;
   fi 
}

check_enz(){
    if [[ `echo "$1" | grep -qi '^BspQI$' && echo "yes" || echo "no"` == "yes" ]]; then
        echo "BSPQI"
    elif [[ `echo "$1" | grep -qi '^BbvCI$' && echo "yes" || echo "no"` == "yes" ]]; then
        echo "BBVCI"
    elif [[ `echo "$1" | grep -qi '^BsmI$' && echo "yes" || echo "no"` == "yes" ]]; then
        echo "BSMI"
    elif [[ `echo "$1" | grep -qi '^BsrDI$' && echo "yes" || echo "no"` == "yes" ]]; then
        echo "BSRDI"
    elif [[ `echo "$1" | grep -qi '^bseCI$' && echo "yes" || echo "no"` == "yes" ]]; then
        echo "BSECI"
    elif [[ `echo "$1" | grep -qi '^BssSI$' && echo "yes" || echo "no"` == "yes" ]]; then
        echo "BSSSI"
    elif [[ `echo "$1" | grep -qi '^DLE1$' && echo "yes" || echo "no"` == "yes" ]]; then
        echo "DLE1"
    else
        echo -e "Oops! We cannot recognise the enzyme name. Please check or contact us for a solution\n"
        exit 1;
    fi
}

check_tool(){
    which $1 >/dev/null 2>&1;
    if [[ $? != 0 ]]; then
        echo -e "\nOops! '$1' is not in the PATH. Please check!\n";
        exit 1;
    fi
    mytool=`$RL -f $(which $1)`;
    if [[ ! -s "$mytool" ]] || [[ ! -x "$mytool" ]]; then
        echo -e "\nOops! It seems '$1' is not executable. Please check!\n";
        exit 1;
    fi
}

VERSION=2.0.1
###========================================== messages ===============================================
##Start message
usage_global(){
echo "
------------------------------------------------------------------------------------------------------
Program:  `basename $0`
Version:  $VERSION
Author:   Yuxuan Yuan (yuxuan.yuan@outlook.com) 
------------------------------------------------------------------------------------------------------
Synopsis: This pipeline aims to help complete key Bionano optical mapping analyses using command line

Usage:    `basename $0` <command> [options]

Command:  fa2cmap       convert a given fasta format file into a cmap file
          cmapstats     check stats of a cmap file
          bnxmerge      merge different bnx files into one
          bnxstats      check stats of a bnx file
          bnxfilter     filter a bnx file 
          MQR           get a molecule quality report for the Bionano data
          repeatCheck   check repeats using Bionano raw data
          denovo        de novo assemble Bionano single molecule maps
          compare       compare two different cmap files
          hybrid        perform Bionano hybrid scaffolding using one enzyme 
          dual          perform Bionano hybrid scaffolding using two enzymes 
          SV            structural variation detection

options:  -h/-help   show this message and exit
-----------------------------------------------------------------------------------------------------
"
}

##Digest a fasta file into a cmap file
usage_digest(){
echo "
----------------------------------------------------------------------------------------
Synopsis: Digest a given fasta format file into a cmap file using particular enzyme

Usage:    `basename $0` fa2cmap [options]
----------------------------------------------------------------------------------------
-f <str>  a fasta format file to be digested
-o <str>  full path to the output directory
-e <str>  name of selected enzyme <BspQI|BbvCI|BsmI|BsrDI|BseCI|BssSI|DLE1>
-q <str>  sequence of the enzyme when -e is not given 
-z <int>  filter criteria: min molecule length (kb). Default: 20  
-l <int>  filter criteria: min number of selected enzymes in the molecule. Default: 5 
-s <str>  full path to the latest Bionano Solve folder

-h/--help show this message and exit
----------------------------------------------------------------------------------------
"
}

##Merge multiple bnx files into a single bnx file
usage_merge(){
echo "
----------------------------------------------------------------------------------------
Synopsis: Merge different bnx files into one file. All bnx files should be generated 
          from the same sample using the same enzyme. The version of those bnx files 
          should be the same

Usage:    `basename $0` bnxmerge [options]
----------------------------------------------------------------------------------------
-l <str>  a file describing all bnx files to be merged: 
          Each line lists the full path along with a descriptive name for that file
-t <int>  number of threads or CPUs
-m <int>  memory used (Gb)
-p <str>  prefix for the merged file
-r <str>  full path to Bionano RefAligner
-o <str>  full path to the output directory

-h/--help show this message and exit
----------------------------------------------------------------------------------------
"
}

##Filter unqualified molecule maps
usage_filter(){
echo "
------------------------------------------------------------------------------------------------
Synopsis: Molecule map quality control--filter unqualified molecule maps and get a new bnx file

Usage:    `basename $0` bnxfilter [options]
------------------------------------------------------------------------------------------------
-b <str>  the bnx file to be filtered
-t <int>  number of threads or CPUs
-m <int>  memory used (Gb)
-p <str>  prefix for the output files
-r <str>  full path to Bionano RefAligner
-l <int>  min molecule length to be filtered (Kb). Default: 150 
-s <int>  min number of selected enzymes in the molecule. Default: 8 
-M <int>  max number of selected enzymes in the molecule. Default: 200 
-i <flt>  maxIntensity to be filtered. Default: 0.6 
-x <flt>  reduce resolution of input molecule maps by xxx*500bp. Default: 0.001 
-o <str>  full path to output directory

-h/--help show this message and exit
------------------------------------------------------------------------------------------------
"
}

##bnxstats
usage_bstats(){
echo "	
------------------------------------------------------------------------------------------------
Synopsis: Check stats of a given bnx file (N_molecules, length, label density, SNR, intensity)

Usage:    `basename $0` bnxstats [options]
------------------------------------------------------------------------------------------------
-b <str>  the bnx file to be checked
-p <str>  prefix for the table extracted from the bnx file
-o <str>  full path to the output directory

-h/--help show this message and exit
------------------------------------------------------------------------------------------------
"
}

##MQR
usage_mqr(){
echo "
------------------------------------------------------------------------------------------------
Synopsis: Report the quality of given Bionano single molecules

Usage:    `basename $0` MQR [options]
------------------------------------------------------------------------------------------------
-b <str>  the raw molecule map file (e.g. Molecules.bnx)
-r <str>  reference maps (.cmap). May use '`basename $0 fa2cmap`' to generate one if only have a fasta format reference
-z <int>  genome size of input species (Mb). Using this option can help to estimate a suitable pvalue (optional)
-R <str>  full path to Bionano RefAligner
-t <int>  maximum threads or CPUs
-m <int>  maximum memory used (Gb)
-s <int>  minimum length of single molecules to be filtered. Default: 150 (Kb) 
-n <int>  times to regenerate the hashtable. Default: 3
-i <int>  iterations for each hashtable. Default: 3 
-l <int>  cutoff of the label interval differences between matched ref and qry maps (Kb). Default: 40
          Disable this option when an input value >1000 
-d <int>  label density of the reference genome if -r is given (xxx/100Kb). For example: 10 (optional)
-p <str>  prefix for the output files
-o <str>  full path to the output directory

-h/--help show this message and exit
------------------------------------------------------------------------------------------------
"
}

##cmap stats
usage_cmapstats(){
echo "
----------------------------------------------------------
Synopsis: Get stats of a cmap file

Usage:    `basename $0` cmapstats [options]
----------------------------------------------------------
-c <str>  full path to the cmap file
-s <str>  full path to the Bionano Solve folder

-h/--help show this message and exit
----------------------------------------------------------
"
}

##Repeat check
usage_repeat(){
echo "
----------------------------------------------------------
Synopsis: Check repeats using Bionano raw data

Usage:    `basename $0` repeatCheck [options]
----------------------------------------------------------
-b <str>  the raw molecule map file (e.g. Molecules.bnx)
-p <str>  prefix for the output files.
-R <str>  full path to Bionano RefAligner
-o <str>  full path to the output directory

-h/--help show this message and exit
----------------------------------------------------------
"
}

##Denovo options
usage_denovo(){
echo "
------------------------------------------------------------------------
Synopsis: De novo assembly for Bionano single molecules

Usage:    `basename $0` denovo [options]
------------------------------------------------------------------------
-P <str>  platform used to generate optical maps <irys|saphyr>. Default: saphyr
-H <str>  haplotype based or not <yes|no>. Default: no (if human data, select: yes)
-M <str>  the data from human or not <yes|no>. Default: no
-e <str>  the enzyme is DLE1 or not <yes|no>. Default: yes
-c <str>  cut complex multi-path Regions (>= 140 Kb) <yes|no>. Default: yes
          This could decrease the number of chimeric maps and increase the total number of assembled maps.
          For human genome, it's recommended. For other species try both.
-E <str>  extend and split for maps <yes|no>. Default: yes
-t <str>  full path to RefAligner folder
-s <str>  full path to Bionano Solve folder
-b <str>  the raw molecule map file (e.g. Molecules.bnx)
-r <str>  the digested reference (.cmap). Default: NULL
-a <flt>  label density (*/100kb). Default: NULL
-T <int>  number of threads or CPUs
-l <int>  minimum length to filter out (Kb). Default: irys [150]; saphyr [120] 
-m <int>  minimum labels on the molecule. Default: 8 
-B <flt>  maximum backbone intensity. Default: 0.6 
-j <int>  number of threads for each subjob
-i <int>  times of iteration. Default: 5
-k <int>  skip steps, using previous result. 0:None, 1:ImgDetect, 2:NoiseChar/Subsample, 
          3:Pairwise, 4:Assembly, 5:RefineA, 6:RefineB, 7:merge0, 8+(i-1)*2:Ext(i), 
          9+(i-1)*2:Mrg(i), N+1:alignmol. Default: 0
-z <int>  the genome size of input species (Mb)
-p <flt>  flase positive density (/100Kb). Default: 2.0
-n <flt>  false negative rate (%/100). Default: 0.10 
-d <flt>  scalingSD (Kb^1/2). Default: 0.0 
-f <flt>  siteSD (Kb). Default: irys [0.15]; saphyr [0.12]
-R <flt>  relativeSD. Default: 0.03
-L <int>  large jobs maximum memory (GB). Default: 128
-S <int>  small jobs maximum memory (GB). Default: 8 
-o <str>  full path to the output directory

-h/--help show this message and exit
------------------------------------------------------------------------
"
}

##Compare assembled Bionano data to a ref cmap file
usage_compare(){
echo "
------------------------------------------------------------------------
Synopsis: Compare a query cmap file to a ref cmap file

Usage:    `basename $0` compare [options]
------------------------------------------------------------------------
-R <str>  path to Bionano RefAligner
-r <str>  full path to the reference cmap file
-q <str>  full path to the query cmap file
-z <int>  the genome size of input species (Mb)
-t <int>  maximum threads or CPUs
-m <int>  Memory used (Gb)
-p <str>  prefix for the output files
-o <str>  full path to the output directory

-h/--help show this message and exit
------------------------------------------------------------------------
"
}

##SV detection
usage_sv(){
echo "
------------------------------------------------------------------------------------------------
Synopsis: Compare cmaps from different individuals to detect structural variation. 

Usage:    `basename $0` SV [options]
------------------------------------------------------------------------------------------------
-P <str>  platform used to generate optical maps <irys|saphyr>. Default: saphyr
-H <str>  haplotype based or not <yes|no>. Default: no (if human data, select: yes)
-M <str>  the data from human or not <yes|no>. Default: no
-e <str>  the enzyme is DLE1 or not <yes|no>. Default: yes
-c <str>  cut complex multi-path Regions (>= 140 Kb) <yes|no>. Default: yes
          This could decrease the number of chimeric maps and increase the total number of assembled maps.
          For human genome, it's recommended. For other species try both.
-E <str>  extend and split for maps <yes|no>. Default: yes
-r <str>  full path to the reference cmap file
-b <str>  a .bed file containing gap information to assist the further accuracy of SV calling (optional)
-q <str>  full path to the query cmap (can be the denovo assembled EXP_REFINEFINAL1.cmap)
-s <str>  full path to Bionano Solve folder
-R <str>  full path to Bionano RefAligner 
-z <str>  the genome size of input species (Mb)
-t <int>  maximum threads or CPUs
-o <str>  full path to the output directory

-h/--help show this message and exit
------------------------------------------------------------------------------------------------
"
}

##Hybrid pipeline
usage_hybrid(){
echo "
------------------------------------------------------------------------------------------------
Synopsis: Run the Bionano hybrid assembly pipeline for maps digested by one enzyme. 

Usage:    `basename $0` hybrid [options]
------------------------------------------------------------------------------------------------
-s <str>  full path to Bionano Solve folder
-R <str>  full path to Bionano RefAligner folder
-r <str>  full path to the NGS sequence file
-b <str>  full path to the raw molecule map file (e.g. Molecules.bnx)
-m <int>  filter: min molecule length (Kb). Default: 0 
-l <int>  filter: min number of selected enzyme in molecule. Default: 0
-e <str>  name of selected enzyme <BspQI|BbvCI|BsmI|BsrDI|BssSI|DLE1>. Default: DLE1 
-B <int>  Bionano conflict filter level: 1 no filter, 2 cut contig at conflict, 3 exclude conflicting contig
-N <int>  NGS conflict filter level: 1 no filter, 2 cut contig at conflict, 3 exclude conflicting contig
-f <str>  final assembled cmap file (e.g. EXP_REFINEFINAL1.cmap)
-x <int>  the xml file used to produce the final assembled cmap file
-c <flt>  Minimum confidence value to output intial alignments. Recommended starting value of 1e-5/genome size in Mb. 
          Default: 1e-10 
-u <flt>  Minimum confidence value used to flag chimeric/conflicting alignments. Default: 1e-11 
-g <flt>  Minimum confidence value used to merge alignments. Recommand to set it to be the same as the -u. 
          Default: irys [1e-13]; saphry [1e-11] 
-d <int>  The distance (kb) from a conflicting site within which the chimeric quality score of Bionano genome map labels will be examined.
          Default: 10 
-p <int>  The minimal percentage (%) of molecules spanning to the left and right of a label of interest, thus supporting the Bionano assembly
          at that region. Default: 35
-t <int>  maximum threads or CPUs
-M <int>  maximum RAM used (Gb)
-o <str>  output directory

-h/--help show this message and exit
------------------------------------------------------------------------------------------------
"
}

usage_dual(){
echo "
------------------------------------------------------------------------------------------------
Synopsis: Run the Bionano hybrid assembly pipeline for maps digested by two enzymes. 

Usage:    `basename $0` dual [options]
------------------------------------------------------------------------------------------------
-s <str>  full path to Bionano Solve folder
-R <str>  full path to Bionano RefAligner 
-1 <str>  full path to the denovo assembled cmap file by the first enzyme 
-2 <str>  full path to the denovo assembled cmap file by the second enzyme
-e <str>  name of first enzyme <BspQI|BbvCI|BsmI|BsrDI|BssSI|DLE1>
-E <str>  name of second enzyme <BspQI|BbvCI|BsmI|BsrDI|BssSI|DLE1>
-n <str>  full path to the NGS assembly 
-o <str>  output directory

-h/--help show this message and exit
------------------------------------------------------------------------------------------------
"
}

###=========================================================== Programs ==================================================================
##Print help if no agrs input
if [[ $# -eq 0 ]];then
    usage_global;
    exit 0;
fi

##Check the first arg
if [[ $1 != "fa2cmap" ]] && [[ $1 != "cmapstats"  ]] && [[ $1 != "bnxstats" ]] && [[ $1 != "bnxmerge" ]]  && [[ $1 != "bnxfilter" ]] && [[ $1 != "denovo" ]] && [[ $1 != "MQR" ]] && [[ $1 != "repeatCheck" ]] && [[ $1 != "compare" ]] && [[ $1 != "hybrid" ]] && [[ $1 != "dual" ]] && [[ $1 != "SV" ]];
then
    if [[ $1 == "-h" ]] || [[ $1 == "-help" ]] || [[ $1 == "--help" ]]; then
        usage_global;
        exit 0;
    else
        echo -e "\nOops! Unknown option '"$1"'"
        echo -e "Please check '`basename $0` -h' and continue...\n";
        exit 1;
    fi
fi

##======================= Select "fa2cmap" flag =======================
##Print help if only select "fa2cmap"
if [[ $1 == "fa2cmap" ]] && [[ $# -eq 1 ]]; then
    usage_digest;
    exit 0;
fi

if [[ $1 == "fa2cmap" ]] && [[ $# -gt 1 ]]; then
    shift
    dig_options=':hf:o:e:s:z:l:q:';
    while getopts "$dig_options" opt; do
        case "$opt" in
            h) usage_digest; exit 0;;
            f) fa=${OPTARG};;
            o) outDir=${OPTARG};;
            e) enz_n=${OPTARG};;
            q) enz_s=${OPTARG};;
            z) minLen=${OPTARG};;
            l) minEnzy=${OPTARG};;
            s) scriptsDir=${OPTARG};;
            \?) echo -e "\nOops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` fa2cmap' and continue...\n"; exit 1;;
            :) echo -e "\nMissing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    #check mandatory options
    check_option "$fa" -f usage_digest; check_option "$outDir" -o usage_digest; check_option "$scriptsDir" -s usage_digest;

    #check enzyme
    if [[ -z "$enz_n" ]] && [[ -z "$enz_s" ]]; then
        echo -e "\nPlease select one enzyme\n";
        exit 1;
    fi
    if [[ -n "$enz_n" ]] && [[ -n "$enz_s" ]];then
        echo -e "\nPlease select either enzyme name or enzyme sequence. Do not use both.\n"; exit 1;
    fi

    #check the fasta 
    fa=`readlink -f "$fa"`;
    check_file "$fa";

    #check outdir
    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi
    if [[ "$outDir" == "." ]];then
        outDir="$PWD"
    elif [[ ${outDir: -2} == ".." ]];then
        outDir="$PWD/$outDir"
    fi
    check_path "$outDir"

    #check scripts 
    last_chr_s="${scriptsDir: -1}"
    if [[ "$last_chr_s" == "/" ]]; then
        scriptsDir="${scriptsDir%?}"
    fi
    if [[ "$scriptsDir" == "." ]];then
        scriptsDir="$PWD"
    elif [[ "${scriptsDir: -2}" == ".." ]];then
        scriptsDir="$PWD/$scriptsDir"
    fi
    check_path "$scriptsDir"

    #check minlen
    if [[ -z "$minLen" ]]; then
        minLen=20
    fi
    check_integer $minLen;

    #check mindensity
    if [[ -z "$minEnzy" ]];then
        minEnzy=5
    fi
    check_integer $minEnzy

    echo "========================================== fa2cmap starts ============================================="
    echo "## Start date: `date`"
    echo "## The fasta format file is: ${fa}"
    echo "## The output directory is: ${outDir}"
    if [[ -z "$enz_s" ]]; then
        echo "## The selected enzyme name is: ${enz_n}"
    fi
    if [[ -z "$enz_n" ]]; then
        echo "## The selected enzyme sequence is: ${enz_s}"
    fi
    echo "## The min molecule length (Kb) to filter is: ${minLen}"
    echo "## The min number of enzyme in a molecule to filter is: ${minEnzy}"
    echo "## The path to Bionano Solve folder is: ${scriptsDir}"
    echo
    name=`basename "$fa" | rev | cut -d"." -f2- | rev`

    digestScript="$scriptsDir"/HybridScaffold/1.0/scripts/fa2cmap_multi_color.pl
    cmap_stat="$scriptsDir"/HybridScaffold/1.0/scripts/calc_cmap_stats.pl
    if [[ ! -s "$digestScript" ]] || [[ ! -s "$cmap_stat" ]]; then
        echo "Please use the original Bionano Solve from Bionano Genomics"
        echo -e "You may download it from https://bionanogenomics.com/support/software-downloads \n"
        echo "## End date: `date`"
        echo "======================================================================================================="
        exit 1;
    fi

    if [[ -z "$enz_n" ]] && [[ -n "$enz_s" ]]; then
        if [[ `echo "$enz_s" | grep -qi '^GCTCTTC$' && echo "yes" || echo "no"` == "yes" ]]; then
            enz_n=BSPQI
        elif [[ `echo "$enz_s" | grep -qi '^CCTCAGC$' && echo "yes" || echo "no"` == "yes" ]];then
            enz_n=BBVCI
        elif [[ `echo "$enz_s" | grep -qi '^GAATGC$' && echo "yes" || echo "no"` == "yes" ]];then
            enz_n=BSMI
        elif [[ `echo "$enz_s" | grep -qi '^GCAATG$' && echo "yes" || echo "no"` == "yes" ]];then
            enz_n=BSRDI
        elif [[ `echo "$enz_s" | grep -qi '^ATCGAT$' && echo "yes" || echo "no"` == "yes" ]];then
            enz_n=BSECI
        elif [[ `echo "$enz_s" | grep -qi '^CACGAG$' && echo "yes" || echo "no"` == "yes" ]];then
            enz_n=BSSSI
        elif [[ `echo "$enz_s" | grep -qi '^CTTAAG$' && echo "yes" || echo "no"` == "yes" ]];then
            enz_n=DLE1
        else
            echo -e "Oops! We cannot recognise the enzyme sequence. Please check or contact us for a solution\n"
            echo "## End date: `date`"
            echo "======================================================================================================="
            exit 1;
        fi
        perl $digestScript -i "$fa" -o "$outDir" -e "$enz_s" 1 -m "$minEnzy" -M "$minLen"
    fi

    if [[ -n "$enz_n" ]] && [[ -z "$enz_s" ]]; then
        if [[ `echo "$enz_n" | grep -qi '^BspQI$' && echo "yes" || echo "no"` == "yes" ]]; then
            enz_n=BSPQI
        elif [[ `echo "$enz_n" | grep -qi '^BbvCI$' && echo "yes" || echo "no"` == "yes" ]]; then
            enz_n=BBVCI
        elif [[ `echo "$enz_n" | grep -qi '^BsmI$' && echo "yes" || echo "no"` == "yes" ]]; then
            enz_n=BSMI
        elif [[ `echo "$enz_n" | grep -qi '^BsrDI$' && echo "yes" || echo "no"` == "yes" ]]; then
            enz_n=BSRDI
        elif [[ `echo "$enz_n" | grep -qi '^bseCI$' && echo "yes" || echo "no"` == "yes" ]]; then
            enz_n=BSECI
        elif [[ `echo "$enz_n" | grep -qi '^BssSI$' && echo "yes" || echo "no"` == "yes" ]]; then
            enz_n=BSSSI
        elif [[ `echo "$enz_n" | grep -qi '^DLE1$' && echo "yes" || echo "no"` == "yes" ]]; then
            enz_n=DLE1
        else
            echo -e "Oops! We cannot recognise the enzyme name. Please check or contact us for a solution\n"
            echo "## End date: `date`"
            echo "======================================================================================================="
            exit 1;
        fi
        perl $digestScript -i "$fa" -o "$outDir" -e "$enz_n" 1 -m "$minEnzy" -M "$minLen"
    fi

    echo "Stats of the generated cmap file:"
    perl $cmap_stat ${outDir}/${name}_${enz_n}_${minLen}kb_${minEnzy}labels.cmap
    density=`grep -v "^#" ${outDir}/${name}_${enz_n}_${minLen}kb_${minEnzy}labels.cmap | cut -f1-3 | uniq | awk '{sum+=$2;SUM+=$3}END{print SUM/sum*100000}'`
    echo "Label density (/100Kb) = `printf "%.3f" $density`"
    echo
    echo "## End date: `date`"
    echo "======================================================================================================="
fi

##==================== Select "cmapstats" flag =====================
##Print help if only select cmapstats
if [[ $1 == "cmapstats" ]] && [[ $# -eq 1 ]]; then
    usage_cmapstats;
    exit 0;
fi

##Select "cmapstats" flag
if [[ $1 == "cmapstats" ]] && [[ $# -gt 1 ]]; then
    shift
    c_options=':hc:s:';
    while getopts "$c_options" opt; do
        case "$opt" in
            h) usage_cmapstats; exit 0;;
            c) cmap=${OPTARG};;
            s) scriptsDir=${OPTARG};;
            \?) echo -e "\nOops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` cmapstats' and continue...\n"; exit 1;;
            :) echo -e "\nMissing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    #check mandatory options
    check_option "$cmap" -c usage_cmapstats; check_option "$scriptsDir" -s usage_cmapstats;

    #check cmap
    cmap=`readlink -f "$cmap"`;
    check_file "$cmap"

    last_chr_s="${scriptsDir: -1}"
    if [[ "$last_chr_s" == "/" ]]; then
        scriptsDir="${scriptsDir%?}"
    fi

    if [[ "$scriptsDir" == "." ]];then
        scriptsDir="$PWD"
    elif [[ "${scriptsDir: -2}" == ".." ]];then
        scriptsDir="$PWD/$scriptsDir"
    fi

    if [[ ! -d "$scriptsDir" ]] || [[ ! -r "$scriptsDir" ]]; then
        echo -e "\nOops! It seems that the Bionano Solve folder is not existent or readable. Please check!"
        echo -e "You may also download it from https://bionanogenomics.com/support/software-downloads, and give a read permission.\n"
        exit 1
    fi

    echo "========================================== cmapstats starts ============================================"
    echo "## Start date: `date`"
    echo "## The cmap file is: ${cmap}"
    echo "## The path to Bionano Solve folder is: ${scriptsDir}"
    echo
    cmap_stat="$scriptsDir"/HybridScaffold/1.0/scripts/calc_cmap_stats.pl
    if [[ ! -s "$cmap_stat" ]];then
        echo "Please use the original Bionano Solve folder from Bionano Genomics"
        echo "You may download it from https://bionanogenomics.com/support/software-downloads"
        echo
        echo "## End date: `date`"
        echo "======================================================================================================="
        exit
    fi

    echo "Stats of the cmap file:"
    perl "$cmap_stat" "$cmap"
    density=`grep -v "^#" "$cmap" | cut -f1-3 | uniq | awk '{sum+=$2;SUM+=$3}END{print SUM/sum*100000}'`
    echo "Label density (/100Kb) = `printf "%.3f" $density`"
    echo
    echo "## End date: `date`"
    echo "======================================================================================================="
fi

##====================== Select "bnxmerge" flag ========================
##Print help if only select bnxmerge
if [[ $1 == "bnxmerge" ]] && [[ $# -eq 1 ]]; then
    usage_merge;
    exit 0;
fi

##Select bnxmerge flag
if [[ $1 == "bnxmerge" ]] && [[ $# -gt 1 ]]; then
    shift
    mg_options=':hl:t:m:p:r:o:';
    while getopts "$mg_options" opt; do
        case "$opt" in
            h) usage_merge; exit 0;;
            l) list=${OPTARG};;
            t) threads=${OPTARG};;
            m) mem=${OPTARG};;
            p) name=${OPTARG};;
            r) refA=${OPTARG};;
            o) outDir=${OPTARG};;
            \?) echo -e "\nOops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` bnxmerge' and continue...\n"; exit 0;;
            :) echo -e "\nMissing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    #check mandatory options
    check_option "$list" -l usage_merge; check_option "$threads" -t usage_merge; check_option "$mem" -m usage_merge; check_option "$name" -p usage_merge;
    check_option "$refA" -r usage_merge; check_option "$outDir" -o usage_merge;     

    #check list
    list=`readlink -f "$list"`
    check_file "$list"

    #check outDir
    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi
    if [[ "$outDir" == "." ]];then
        outDir="$PWD"
    elif [[ ${outDir: -2} == ".." ]];then
        outDir="$PWD/$outDir"
	fi
    check_path "$outDir"

    #check threads and mem
    check_integer $threads; check_integer $mem

    echo "========================================== bnxmerge starts ============================================="
    echo "## Start date: `date`"
    echo "## The list file is: ${list}"
    echo "## number of threads/CPUs is: ${threads}"
    echo "## RAMs (Gb) are: ${mem}"
    echo "## output bnx file name is: ${name}"
    echo "## output directory is: ${outDir}"
    echo
    refA=`readlink -f "$refA"`

    if [[ -s "$refA" ]] && [[ -x "$refA" ]]; then
        "$refA" -f -if "$list" -merge -sort-idinc -bnx -maxthreads "$threads" -maxmem "$mem" -o "${outDir}/${name}" -XmapStatWrite "${outDir}"/merged_stats.txt -stdout -stderr
    else
        echo "Please check the availability or executability of your RefAligner!"
        echo "You may download it from https://bionanogenomics.com/support/software-downloads, and give an executable permission."
    fi	
    echo
    echo "## End date: `date`"
    echo "======================================================================================================="
fi

##==================== Select "bnxstats flag =========================
##Print help if only select bnxstats
if [[ $1 == "bnxstats" ]] && [[ $# -eq 1 ]]; then
    usage_bstats;
    exit 0
fi

##Select bnxstats flag
if [[ $1 == "bnxstats" ]] && [[ $# -gt 1 ]]; then
    shift
    bs_options=':hb:p:o:';
    while getopts "$bs_options" opt; do
        case "$opt" in
            h) usage_bstats; exit 0;;
            b) bnx=${OPTARG};;
            p) name=${OPTARG};;
            o) outDir=${OPTARG};;
            \?) echo -e "\nOops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` bnxstats' and continue...\n"; exit 0;;
            :) echo -e "\nMissing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    #check mandatory options
    check_option "$bnx" -b usage_bstats; check_option "$name" -p usage_bstats; check_option "$outDir" -o usage_bstats;

    bnx=`readlink -f "$bnx"`;
    check_file "$bnx";

    check=`grep -c "# BNX File Version:" "$bnx"`
    if [[ "$check" -eq 0 ]]; then
        echo -e "\nOops! It seems the input file is not a bnx file. Please check!\n"
        exit 1
    fi

    #check outDir
    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi
    if [[ "$outDir" == "." ]];then
        outDir="$PWD"
    elif [[ ${outDir: -2} == ".." ]];then
        outDir="$PWD/$outDir"
    fi
    check_path "$outDir";

    for i in `grep -v "^#" "$bnx" | awk '{if(NR%4==1) print $1}'`; do
        if [[ $i != 0 ]]; then
            echo -e "\nOops! It seems the bnx file: '${bnx}' is not complete. Please check!\n"
            exit 1
        fi
    done

    rm -rf "$outDir"/"$name".txt

    printf "Length""\t""AvgIntensity""\t""SNR""\t""NumberofLabels""\n" >> "$outDir"/"$name".txt
    grep -v "^#" "$bnx" | awk 'BEGIN{OFS="\t"}{if(NR%4==1) print $3,$4,$5,$6}'  >> "$outDir"/"$name".txt

    n_mol=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $0}' | wc -l`
    cL=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) sum+=$3}END{print sum/1000000}'`
    avgL=`grep -v "^#" "$bnx" | awk -v n=$n_mol '{if (NR%4==1) sum+=$3}END{print sum/n/1000}'`
    minL=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $3}' | sort -n | head -n 1`
    maxL=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $3}' | sort -rn | head -n 1`

    half=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) sum+=$3}END{print sum/2}'`
    n=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $3}' | sort -n | awk -v hv=$half '{sum+=$1} {if(sum<=hv) print NR}' | tail -1`
    if [[ `awk "BEGIN{print $n_mol%2}"` == 0 ]]; then
        s1=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $3}' | sort -n | awk -v n=$n '{if(NR==n) print $1}'`
        s2=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $3}' | sort -n | awk -v n=$n '{if(NR==n+1) print $1}'`
        n50=`awk "BEGIN{print ($s1+$s2)/2}"`
    else
        n50=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $3}' | sort -n | awk -v n=$n '{if(NR==n+1) print $1}'`
    fi

    stdL=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $3}' | awk '{x[NR]=$1; s+=$1; n++} END {a=s/n; for (i in x) {ss+=(x[i]-a)^2} sd=sqrt(ss/n); print sd}'`
    den=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) sum+=$6}END{print sum}'`

    minSNR=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $5}' | sort -n | head -n 1`
    maxSNR=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $5}' | sort -rn | head -n 1`
    avgSNR=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $5}' | awk '{sum+=$1; n++} END {print sum/n}'`

    minten=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $4}' | sort -n | head -n 1`
    maxten=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $4}' | sort -rn | head -n 1`
    avgten=`grep -v "^#" "$bnx" | awk '{if (NR%4==1) print $4}' | awk '{sum+=$1; n++} END {print sum/n}'`

    echo "========================================== bnxstats starts ============================================="
    echo "## Start date: `date`"
    echo "## The checked bnx file is: ${bnx}"
    echo "## Name for the saved table: ${name}.txt"
    echo "## Output directory is: ${outDir}"
    echo
    echo "Stats of molecules in the input bnx file:"
    echo "Number of molecules is: ${n_mol}"
    echo "Total length of those molecules is (Mb): ${cL}"
    echo "The length N50 is (Kb): `awk "BEGIN{ print ${n50}/1000}"`"
    echo "Minimum length of those molecules is (Kb): `awk "BEGIN{ print $minL/1000}"`"
    echo "Maximum length of those molecules is (Kb): `awk "BEGIN{ print $maxL/1000}"`"
    echo "Average length of those molecules is (kb): ${avgL}"
    echo "Length standard deviation is (Kb): `awk "BEGIN{ print $stdL/1000}"`"
    echo "Total number of labels is: $den"
    echo "Label density is (/100Kb): `awk "BEGIN{print $den/$cL/10}"`"
    echo "Maximum signal noise ratio (SNR) is: ${maxSNR}"
    echo "Minimum signal noise ratio (SNR) is: ${minSNR}"
    echo "Average signal noise ratio (SNR) is: ${avgSNR}"
    echo "Maximum avgIntensity is: ${maxten}"
    echo "Minimum avgIntensity is: ${minten}"
    echo "Average avgIntensity is: ${avgten}"

    echo
    echo  "## End date: `date`"
    echo "========================================================================================================="
fi

##===================== Select "bnxfilter" flag =======================
##Print help if only select bnxfilter
if [[ $1 == "bnxfilter" ]] && [[ $# -eq 1 ]]; then
    usage_filter;
    exit 0;
fi

##Select bnxfilter flag
if [[ $1 == "bnxfilter" ]] && [[ $# -gt 1 ]]; then
    shift
    ft_options=':hb:t:m:p:r:l:s:M:i:x:o:';
    while getopts "$ft_options" opt; do
        case "$opt" in
            h) usage_filter; exit 0;;
            b) bnx=${OPTARG};;
            t) threads=${OPTARG};;
            m) mem=${OPTARG};;
            p) name=${OPTARG};;
            r) refA=${OPTARG};;
            l) minlen=${OPTARG};;
            s) minsite=${OPTARG};;
            M) maxsite=${OPTARG};;
            i) maxinten=${OPTARG};;
            x) pix=${OPTARG};;
            o) outDir=${OPTARG};;
            \?) echo;echo -e "Oops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` bnxfilter' and continue...\n"; exit 0;;
            :) echo;echo -e "Missing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    #check mandatory options
    check_option "$bnx" -b usage_filter; check_option "$threads" -t usage_filter; check_option "$mem" -m usage_filter; check_option "$name" -p usage_filter;
    check_option "$refA" -r usage_filter; check_option "$outDir" -o usage_filter;

    bnx=`readlink -f "$bnx"`
    check_file "$bnx";

    refA=`readlink -f "$refA"`
    if [[ ! -s "refA" ]] && [[ ! -x "$refA" ]]; then
        echo -e "\nPlease check your RefAligner whether it is existent or executable"
        echo -e "You may download it from https://bionanogenomics.com/support/software-downloads, and give an executable permission.\n"
        exit 1
    fi

    #check outDir
    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi
    if [[ "$outDir" == "." ]];then
        outDir="$PWD"
    elif [[ "${outDir: -2}" == ".." ]];then
        outDir="$PWD/$outDir"
    fi
    check_path "$outDir"

    if [[ -z "$minlen" ]]; then
        minlen=100
    fi
    if [[ -z "$minsite" ]]; then
        minsite=6
    fi
    if [[ -z "$maxsite" ]]; then
        maxsite=200
    fi
    if [[ -z "$maxinten" ]]; then
        maxinten=0.6
    fi
    if [[ -z "$pix" ]]; then
        pix=0.001
    fi

    check_integer $threads; check_integer $mem; check_integer $minlen; check_integer $minsite;

    echo "====================================== bnxfilter starts ======================================="
    echo "## Start date: `date`"
    echo "## The bnx file is: ${bnx}" 
    echo "## The RefAligner is: ${refA}"
    echo "## Number of threads/CPUs: ${threads}"
    echo "## RAM (Gb) used: ${mem}"
    echo "## The minimun filtered single molecule length (Kb) is: ${minlen}"
    echo "## The minimun number of sites on a molecule is: ${minsite}"
    echo "## The maximun number of sites on a molecule is: ${maxsite}"
    echo "## The maxIntensity to be filtered is: ${maxinten}"
    echo "## Cutoff of the multiple of 500bp resolution: ${pix}"
    echo "## Name of the filtered bnx file: ${name}"
    echo "## The output directory is: ${outDir}"
    echo
    "$refA" -f -i "$bnx" -merge -sort-idinc -bnx -maxthreads "$threads" -maxmem "$mem" -o "${outDir}/${name}" -minlen "$minlen" -minsites "$minsite" -MaxIntensity "$maxinten" -usecolor 1 -maxsites "$maxsite" -mres "$pix" -XmapStatWrite "${outDir}"/filtered_stats.txt -stdout -stderr
    echo
    echo "## End date: `date`"
    echo "==============================================================================================="
fi

##======================= Select "MQR" flag =======================
##Print help if only select MQR
if [[ $1 == "MQR" ]] && [[ $# -eq 1 ]];then
    usage_mqr;
    exit 0;
fi
##Select "MQR" flag
if [[ $1 == "MQR" ]] && [[ $# -gt 1 ]];then
    shift
    mr_options=':hb:r:R:t:m:z:s:n:i:l:d:o:p:'
    while getopts "$mr_options" opt; do
        case "$opt" in
            h) usage_mqr; exit 0;;
            b) bnx=${OPTARG};;
            r) ref=${OPTARG};;
            R) RefA=${OPTARG};;
            t) maxthreads=${OPTARG};;
            m) maxmem=${OPTARG};;
            z) gs=${OPTARG};;
            s) minlen=${OPTARG};;
            n) times=${OPTARG};;
            i) iter=${OPTARG};;
            l) outlier=${OPTARG};;
            d) density=${OPTARG};;
            o) outDir=${OPTARG};;
            p) name=${OPTARG};;
            \?) echo;echo -e "Oops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` MQR' and continue...\n"; exit 0;;
            :) echo;echo -e "Missing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    #check mandatory options
    check_option "$bnx" -b usage_mqr; check_option "$RefA" -R usage_mqr; check_option "$ref" -r usage_mqr; check_option "$maxthreads" -t usage_mqr;
    check_option "$maxmem" -m usage_mqr; check_option "$name" -p usage_mqr; check_option "$outDir" -o usage_mqr;

    ref=`readlink -f "$ref"`;
    check_file "$ref";

    if [[ ! -z "$density" ]] && [[ ! -z "$gs" ]];
    then
        check_integer $gs
        if [[ "$gs" -ge 1000 ]]; then
            if [[ "$density" -ge 15 ]]; then
                diff=$(($density-15))
                pv=`awk "BEGIN {print 1e-11/100^$diff}"`
            else
                pv=1e-11
            fi
        else
            pv=`awk "BEGIN {print 1.0e-5/$gs}"`
        fi
    fi

    if [[ -z "$density" ]] && [[ ! -z "$gs" ]]; then
        check_integer $gs
        pv=`awk "BEGIN {print 1.0e-5/$gs}"`
    fi

    if [[ -z "$gs" ]]; then
        pv=1e-11
    fi

    if [[ -z "$minlen" ]];then
        minlen=150;
    fi
    if [[ -z "$times" ]];then
        times=3
    fi

    if [[ -z "$iter" ]];then
        iter=3
    fi
    M="$iter $times"

    if [[ -z "$outlier" ]]; then
        outlier=40
    fi

    bnx=`readlink -f "$bnx"`
    check_file "$bnx";

    if [[ -s "$RefA" ]] && [[ -x "$RefA" ]];then
        RefA=`readlink -f "$RefA"`
    else
        echo -e "\nIt seems the RefAligner is not existent or executable. Please check!"
        echo -e "You may also download it from https://bionanogenomics.com/support/software-downloads, and give an executable permission.\n"
        exit 1;
    fi

    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi
    if [[ "$outDir" == "." ]];then
        outDir="$PWD"
    elif [[ "${outDir: -2}" == ".." ]];then
        outDir="$PWD/$outDir"
        outDir_full="$outDir$name"
    fi
    check_path "$outDir"
    outDir_full="$outDir/$name"

    check_integer $maxthreads; check_integer $maxmem; check_integer $minlen; check_integer $iter; check_integer $times

    echo "====================================== Checking the molecule quality ======================================="
    echo "## Start date: `date`"
    echo "## The bnx file is: ${bnx}"
    if [[ -s "$ref" ]];then
        echo "## The ref is: ${ref}"
    fi
    if [[ ! -z "$gs" ]]; then
        echo "## The genome size is (Mb): ${gs}"
    fi
    echo "## The RefAligner is: ${RefA}"
    echo "## The maximum threads are: ${maxthreads}"
    echo "## The maximum memory (Gb) are: ${maxmem}"
    echo "## The minimun filtered single molecule length (Kb) is: ${minlen}"
    echo "## Iteriations for each hashtable: ${iter}"
    echo "## Times to regenerate the hashtable: ${times}"
    echo "## Cutoff of the label interval differences: ${outlier}"
    if [[ ! -z "$density" ]];then
        echo "## label density of the reference genome: ${density}/100Kb"
    fi
    echo "## The output file names are: ${outDir_full}*"
    echo
    if [[ -z "$ref" ]]; then
        "$RefA" -f -i "$bnx" -o "$outDir_full" -nosplit 2 -BestRef 1 -biaswt 0 -Mfast 0 -FP 1.5 -FN 0.15 -sf 0.2 -sd 0.0 -A 5 -outlier 1e-3 -outlierMax "$outlier" -endoutlier 1e-4 -S -1000 -sr 0.03 -se 0.2 -MaxSF 0.25 -MaxSE 0.5 -resbias 4 64 -maxmem "$maxmem" -M "$M" -minlen "$minlen" -T "$pv" -maxthreads "$maxthreads" -hashgen 5 3 2.4 1.5 0.05 5.0 1 1 3 -hash -hashdelta 10 -hashoffset 1 -hashmaxmem "$maxmem" -insertThreads 4 -maptype 0 -PVres 2 -PVendoutlier -AlignRes 2.0 -rres 0.9 -resEstimate -ScanScaling 2 -RepeatMask 5 0.01 -RepeatRec 0.7 0.6 1.4 -maxEnd 50 -usecolor 1 -stdout -stderr -randomize 1 -subset 1 5000 >&1
        rm ${outDir_full}*bin
        echo
    else
        "$RefA" -f -ref "$ref" -i $bnx -o "$outDir_full" -nosplit 2 -BestRef 1 -biaswt 0 -Mfast 0 -FP 1.5 -FN 0.15 -sf 0.2 -sd 0.0 -A 5 -outlier 1e-3 -outlierMax "$outlier" -endoutlier 1e-4 -S -1000 -sr 0.03 -se 0.2 -MaxSF 0.25 -MaxSE 0.5 -resbias 4 64 -maxmem "$maxmem" -M "$M" -minlen "$minlen" -T "$pv" -maxthreads "$maxthreads" -hashgen 5 3 2.4 1.5 0.05 5.0 1 1 3 -hash -hashdelta 10 -hashoffset 1 -hashmaxmem "$maxmem" -insertThreads 4 -maptype 0 -PVres 2 -PVendoutlier -AlignRes 2.0 -rres 0.9 -resEstimate -ScanScaling 2 -RepeatMask 5 0.01 -RepeatRec 0.7 0.6 1.4 -maxEnd 50 -usecolor 1 -stdout -stderr -randomize 1 -subset 1 5000 >&1

        if [[ -s "${outDir_full}.err" ]]; then
            FP=`tail -1 "${outDir_full}.err" | cut -f2`
            FN=`tail -1 "${outDir_full}.err" | cut -f3`
            sd=`tail -1 "${outDir_full}.err" | cut -f5`
            sf=`tail -1 "${outDir_full}.err" | cut -f4`
            bpp=`tail -1 "${outDir_full}.err" | cut -f6`
            fp=`tail -1 "${outDir_full}.err" | cut -f13`
            nmol=`tail -1 "${outDir_full}.err" | cut -f8`
            sr=`tail -1 "${outDir_full}.err" | cut -f14`
            maps=`tail -1 "${outDir_full}.map" | cut -f1`

            if [[ ! -z "$maps" ]];then
                maprate=`awk "BEGIN{print $maps/$nmol*100}"`
            fi

            echo
            echo "False Positive Density (/100Kb) [FP]: `printf "%.2f" $FP`"
            echo "FP(%):                                `printf "%.2f" $fp`"
            echo "False Negative Rate (%/100) [FN]:     `printf "%.2f" $FN`"
            echo "ScalingSD (Kb^1/2) [sd]:              `printf "%.2f" $sd`"
            echo "SiteSD (Kb) [sf]:                     `printf "%.2f" $sf`"
            echo "RelativeSD [sr]:                      `printf "%.2f" $sr`"
            echo "Bpp:                                  `printf "%.2f" $bpp`"
            echo "N Molecules mapped to reference:      `printf $nmol`"
            echo "Map rate (%):                         `printf "%.2f" $maprate`"
            echo
        else
            echo
            echo "Oops! Something is wrong with your MQR running, please check!"
            echo
        fi
    fi

    echo "## End date: `date`"
    echo "==========================================================================================================="
fi

##======================= Select "repeatCheck" flag =======================
##Print help if only select repeatCheck
if [[ $1 == "repeatCheck" ]] && [[ $# -eq 1 ]];then
    usage_repeat;
    exit 0;
fi
##Select "repeatCheck" flag
if [[ $1 == "repeatCheck" ]] && [[ $# -gt 1 ]];then
    shift
    rc_options=':hb:o:p:R:';
    while getopts "$rc_options" opt; do
        case "$opt" in
            h) usage_repeat; exit 0;;
            b) bnx=${OPTARG};;
            o) outDir=${OPTARG};;
            p) name=${OPTARG};;
            R) RefA=${OPTARG};;
            \?) echo -e "\nOops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` repeatCheck -h' and continue...\n"; exit 0;;
            :) echo -e "\nMissing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    #check mandatory options
    check_option "$bnx" -b usage_repeat; check_option "$outDir" -o usage_repeat; check_option "$name" -p usage_repeat; check_option "$RefA" -R usage_repeat;

    bnx=`readlink -f "$bnx"`
    check_file "$bnx"

    RefA=`readlink -f "$RefA"`
    if [[ ! -s "$RefA" ]] || [[ ! -x "$RefA" ]]; then
        echo -e "\nIt seems the RefAligner is not existent or executable. Please check!"
        echo -e "You may also download it from https://bionanogenomics.com/support/software-downloads, and give an executable permission.\n"
        exit 1
    fi

    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi
    if [[ "$outDir" == "." ]];then
        outDir="$PWD"
    elif [[ "${outDir: -2}" == ".." ]];then
        outDir="$PWD/$outDir"
        outDir_full="$outDir$name"
    fi

    check_path "$outDir"
    outDir_full="$outDir/$name"

    echo "========================================== repeatCheck starts ============================================="
    echo "## Start date: `date`"
    echo "## The bnx file is: ${bnx}"
    echo "## The Bionano RefAligner is: ${RefA}"
    echo "## The output file names are: ${outDir_full}*"
    echo
    "$RefA" -i "$bnx" -f -simpleRepeatTolerance 0.1 -simpleRepeatMinEle 5 -o "$outDir_full" -simpleRepeatStandalone -stdout -stderr >&1
    echo
    echo "## End date: `date`"
    echo "==========================================================================================================="
fi

bg=2500
##======================= Select "denovo" flag =======================
##Print help if only select denovo
if [[ $1 == "denovo" ]] && [[ $# -eq 1 ]];then
    usage_denovo;
    exit 0;
fi
##Select "denovo" flag
if [[ $1 == "denovo" ]] && [[ $# -gt 1 ]];then
    shift
    deno_options=':ht:P:H:M:e:E:c:s:b:a:T:j:i:k:B:z:r:p:n:d:f:R:L:S:o:l:m:';
    while getopts "$deno_options" opt; do
        case "$opt" in
            h) usage_denovo; exit 0;;
            P) plt=${OPTARG};;
            H) hap=${OPTARG};;
            M) hum=${OPTARG};;
            e) enzy=${OPTARG};;
            c) cut=${OPTARG};;
            E) es=${OPTARG};;
            t) toolsDir=${OPTARG};;
            s) scriptsDir=${OPTARG};;
            b) bnx=${OPTARG};;
            l) len=${OPTARG};;
            m) site=${OPTARG};;
            B) maxIntensity=${OPTARG};;
            T) nthreads=${OPTARG};;
            j) njobs=${OPTARG};;
            i) iter=${OPTARG};;
            k) skip=${OPTARG};;
            z) gs=${OPTARG};;
            r) ref=${OPTARG};;
            a) labD=${OPTARG};;
            p) fp=${OPTARG};;
            n) fn=${OPTARG};;
            d) sd=${OPTARG};;
            f) sf=${OPTARG};;
            R) sr=${OPTARG};;
            L) lm=${OPTARG};;
            S) sm=${OPTARG};;
            o) outDir=${OPTARG};;
            \?) echo -e "\nOops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` denovo -h' and continue...\n"; exit 0;;
            :) echo -e "\nMissing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    #check mandatory options
    check_option "$toolsDir" -t usage_denovo; check_option "$scriptsDir" -s usage_denovo; check_option "$bnx" -b usage_denovo; check_option "$nthreads" -T usage_denovo;
    check_option "$njobs" -j usage_denovo; check_option "$gs" -z usage_denovo; check_option "$outDir" -o usage_denovo;

    if [[ -z "$plt" ]]; then 
        plt=saphyr
	fi
	if [[ "$plt" != "irys" ]] && [[ "$plt" != "saphyr" ]]; then 
        echo -e "\nOops! Please using 'irys' or 'saphyr' after specifying '-p' option。\n"; exit 1;
    fi

    if [[ -z "$hap" ]]; then 
        hap=no
	fi
    check_yesno "$hap"
    
    if [[ -z "$hum" ]]; then 
        hum=no
	fi
    check_yesno "$hum"

    if [[ -z "$enzy" ]]; then 
        enzy=yes
	fi
    check_yesno "$enzy"

    if [[ -z "$cut" ]]; then 
        cut=yes
	fi
    check_yesno "$cut"

    if [[ -z "$es" ]]; then 
        es=yes
	fi
    check_yesno "$es"

    if [[ -z "$iter" ]]; then
        iter=5
    fi

    if [[ -z "$skip" ]]; then
        skip=0
    fi

    if [[ -z "$fp" ]]; then
        fp=2.0
    fi

    if [[ -z "$fn" ]]; then
        fn=0.10
    fi

    if [[ -z "$sd" ]]; then
        sd=0.0
    fi

    if [[ -z "$sf" ]]; then
        if [[ "$plt" == "irys" ]]; then
            sf=0.15
        else
            sf=0.12
		fi
    fi

    if [[ -z "$sr" ]]; then
        sr=0.03
    fi

    if [[ -z "$lm" ]]; then
        lm=128
    fi

    if [[ -z "$sm" ]]; then
        sm=8
    fi

    if [[ -z "$len" ]]; then
        if [[ "$plt" == "irys" ]]; then
            len=150
        else
            len=120
		fi
    fi

    if [[ -z "$site" ]]; then
        site=8
    fi

    if [[ -z "$maxIntensity" ]]; then
        maxIntensity=0.6
    fi

    check_integer $nthreads; check_integer $njobs; check_integer $iter; check_integer $gs; check_integer $skip

    last_chr_t="${toolsDir: -1}"
    if [[ "$last_chr_t" == "/" ]]; then
        toolsDir="${toolsDir%?}"
    fi
    if [[ "$toolsDir" == "." ]];then
        toolsDir="$PWD"
    elif [[ "${toolsDir: -2}" == ".." ]];then
        toolsDir="$PWD/$toolsDir"
    fi
	
    last_chr_s="${scriptsDir: -1}"
    if [[ "$last_chr_s" == "/" ]]; then
        scriptsDir="${scriptsDir%?}"
    fi
    if [[ "$scriptsDir" == "." ]];then
        scriptsDir="$PWD"
    elif [[ "${scriptsDir: -2}" == ".." ]];then
        scriptsDir="$PWD/$scriptsDir"
    fi

    if [[ ! -d "$toolsDir" ]] && [[ ! -x "$toolsDir"/RefAligner ]] && [[ ! -x "$toolsDir"/Assembler ]]; then
        echo -e "\nPlease check the RefAligner folder and the executability of all inside!"
        echo -e "You may download it from https://bionanogenomics.com/support/software-downloads, and give an executable permission\n"
        exit 1
    fi

    if [[ ! -d "$scriptsDir" ]] || [[ ! -r "$scriptsDir" ]]; then
        echo -e "\nOops! It seems the Bionano Solve folder is not existent or readable. Please check!"
        echo -e "You may also download it from https://bionanogenomics.com/support/software-downloads, and give a read permission\n"
	    exit 1
    fi

    if [[ ! -s "$scriptsDir/Pipeline/1.0/pipelineCL.py" ]]; then
        echo -e "\nPlease use the original Bionano Solve folder."
        echo -e "You may download it from https://bionanogenomics.com/support/software-downloads, and give a read permission\n"
        exit 1
    fi

    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi
    if [[ "$outDir" == "." ]];then
        outDir="$PWD"
    elif [[ "${outDir: -2}" == ".." ]];then
        outDir="$PWD/$outDir"
    fi

    check_path "$outDir"

    bnx=`readlink -f "$bnx"`
    check_file "$bnx"

	#check xml
	refADir="$toolsDir"

	cnt=`ls $refADir | grep -c xml`; 
	if [[ $cnt -ge 1 ]]; then 
        refADir=$refADir
	else
        cnt=`ls $refADir/../. | grep -c xml`;
		if [[ $cnt -ge 1 ]]; then 
            refADir="$refADir/.."
        else
            echo -e "\nOops! It seems that the input Bionano Solve folder is not the original folder or not readable. Please check!"
            echo -e "You may also download it from https://bionanogenomics.com/support/software-downloads\n"; exit 1;
		fi
	fi

	if [[ "$plt" == "irys" ]]; then 
        if [[ "$hap" == "yes" ]]; then 
            if [[ "$cut" == "yes" ]]; then
                xml="$refADir/optArguments_haplotype_irys.xml"
            else
                xml="$refADir/optArguments_haplotype_noCut_irys.xml"
			fi
        else
            if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
                xml="$refADir/optArguments_nonhaplotype_irys.xml"
            fi 
            if [[ "$cut" == "no" ]] && [[ "$es" == "yes" ]]; then
                xml="$refADir/optArguments_nonhaplotype_noCut_irys.xml"
            fi 
            if [[ "$cut" == "yes" ]] && [[ "$es" == "no" ]]; then
                xml="$refADir/optArguments_nonhaplotype_noES_irys.xml"
            fi    
            if [[ "$cut" == "no" ]] && [[ "$es" == "no" ]]; then
                xml="$refADir/optArguments_nonhaplotype_noES_noCut_irys.xml"
            fi  
        fi
    else
        if [[ "$hum" == "yes" ]]; then 
            if [[ "$hap" == "yes" ]]; then 
                if [[ "$enzy" == "yes" ]]; then 
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_haplotype_DLE1_saphyr_human.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_haplotype_noCut_DLE1_saphyr_human.xml"
					fi
				else
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_haplotype_saphyr_human.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_haplotype_noCut_saphyr_human.xml"
					fi
				fi
			else
                if [[ "$enzy" == "yes" ]]; then 
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_nonhaplotype_DLE1_saphyr_human.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_nonhaplotype_noCut_DLE1_saphyr_human.xml"
					fi
					if [[ "$es" == "no" ]]; then
						xml="$refADir/optArguments_nonhaplotype_noES_DLE1_saphyr_human.xml"
					fi					
				else
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_nonhaplotype_saphyr_human.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_nonhaplotype_noCut_saphyr_human.xml"
					fi
				fi							                    
			fi
		else
            if [[ "$hap" == "yes" ]]; then 
                if [[ "$enzy" == "yes" ]]; then 
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_haplotype_DLE1_saphyr.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_haplotype_noCut_DLE1_saphyr.xml"
					fi
				else
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_haplotype_saphyr.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_haplotype_noCut_saphyr.xml"
					fi
				fi
			else
                if [[ "$enzy" == "yes" ]]; then 
				    if [[ $gs -le $bg ]]; then 
						if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
							xml="$refADir/optArguments_nonhaplotype_DLE1_saphyr.xml"
						fi
						if [[ "$cut" == "no" ]] && [[ "$es" == "yes" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noCut_DLE1_saphyr.xml"
						fi
						if [[ "$cut" == "yes" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_DLE1_saphyr.xml"
						fi		
						if [[ "$cut" == "no" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_noCut_DLE1_saphyr.xml"
						fi
					else
						if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
							xml="$refADir/optArguments_nonhaplotype_BG_DLE1_saphyr.xml"
						fi
						if [[ "$cut" == "no" ]] && [[ "$es" == "yes" ]]; then
							echo -e "\nOops! We don't support noCut with extent and split\n"; exit 1;
						fi
						if [[ "$cut" == "yes" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_BG_DLE1_saphyr.xml"
						fi		
						if [[ "$cut" == "no" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_noCut_BG_DLE1_saphyr.xml"
						fi						
					fi			
				else
					if [[ $gs -le $bg ]]; then 
						if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
							xml="$refADir/optArguments_nonhaplotype_saphyr.xml"
						fi
						if [[ "$cut" == "no" ]] && [[ "$es" == "yes" ]];then
							xml="$refADir/optArguments_nonhaplotype_noCut_saphyr.xml"
						fi
						if [[ "$cut" == "yes" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_saphyr.xml"
						fi		
						if [[ "$cut" == "no" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_noCut_saphyr.xml"
						fi
					else
						if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
							xml="$refADir/optArguments_nonhaplotype_BG_saphyr.xml"
						fi
						if [[ "$cut" == "no" ]] && [[ "$es" == "yes" ]];then
							xml="$refADir/optArguments_nonhaplotype_noCut_BG_saphyr.xml"
						fi
						if [[ "$cut" == "yes" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_BG_saphyr.xml"
						fi		
						if [[ "$cut" == "no" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_noCut_BG_saphyr.xml"
						fi
					fi
				fi							                    
			fi
        fi
    fi

	if [[ "$plt" == "irys" ]]; then
        pval=1e-10
		pvals=1e-11
	else
		if [[ $gs -le $bg ]]; then
		    if [[ $enzy != 'yes' ]]; then 
                pval=1e-10
                pvals=1e-11
			else
                pval=1e-11
                pvals=1e-12				                
			fi
		else
		    if [[ $enzy != 'yes' ]]; then 
                pval=1e-12
                pvals=1e-13
			else
                pval=1e-11
                pvals=1e-12				                
			fi
		fi			
    fi

    echo "========================================== De novo assembly starts ============================================="
    echo "## Start date: `date`"
	echo "## The data generation platform is: ${plt}"
    echo "## The bnx file is: ${bnx}"
    if [[ ! -z "$ref" ]]; then
        echo "## The digested reference is: ${ref}"
    fi
    echo "## The minimum molecule length is (Kb): ${len}"
    echo "## The minimum label on a molecule is: ${site}"
    echo "## Maximum backbone intensity is: ${maxIntensity}"
    echo "## The path to Bionano Solve folder is: ${scriptsDir}"
    echo "## The path to Bionano RefAligner folder is: ${toolsDir}"
    echo "## The number of threads is: ${nthreads}"
    echo "## Large jobs maximum memory (GB) is: ${lm}"
    echo "## Small jobs maximum memory (GB) is: ${sm}"
    echo "## The number of threads for each subjob is: ${njobs}"
    echo "## The number of iterations is: ${iter}"
    echo "## False Positive Density (/100Kb) [FP]: ${fp}"
    echo "## False Negative Rate (%/100) [FN]: ${fn}"
    echo "## ScalingSD (Kb^1/2) [sd]: ${sd}"
    echo "## SiteSD (Kb) [sf]: ${sf}"
    echo "## RelativeSD [sr]: ${sr}"
    echo "## The genome size (Mb) is: ${gs}"
    echo "## The xml file is: ${xml}"
    echo "## The output directory is: ${outDir}"
    echo
    cp -f "$xml" "$outDir/optArguments_new.xml"

	if [[ "$plt" == "irys" ]]; then
        pv=`awk "BEGIN {print 1.0e-5/$gs}"`
        pvs=`awk "BEGIN {print $pv/10}"`
        sed -i -e "s/val0=\"150\"\ display=\"Molecule\ Length\ Threshold/val0=\"$len\"\ display=\"Molecule\ Length\ Threshold/" -e "s/val0=\"9\"\ display=\"Min\ Labels\ per\ molecule\"/val0=\"$site\"\ display=\"Min\ Labels\ per\ molecule\"/" -e "s/\"-FP\"\ val0=\"2.0\"/\"-FP\"\ val0=\"$fp\"/" -e "s/\"-FN\"\ val0=\"0.15\"/\"-FN\"\ val0=\"$fn\"/" -e "s/\"-sd\"\ val0=\"0.0\"/\"-sd\"\ val0=\"$sd\"/" -e "s/\"-sr\"\ val0=\"0.03\"/\"-sr\"\ val0=\"$sr\"/" -e "s/\"-sf\"\ val0=\"0.15\"/\"-sf\"\ val0=\"$sf\"/" -e "s/val0=\"248\"/val0=\"$lm\"/" -e "s/val0=\"7.2\"/val0=\"$sm\"/" -e "s/val0=\"$pval\"\ display=\"P\ Value\ Cutoff\ Threshold\"\ tab=\"ASSEMBLE\"\ group=\"Initial\ Assembly\"/val0=\"$pv\"\ display=\"P\ Value\ Cutoff\ Threshold\"\ tab=\"ASSEMBLE\"\ group=\"Initial\ Assembly\"/" -e "s/val0=\"$pvals\"\ display=\"P\ Value\ Cutoff\ Threshold\"\ tab=\"ASSEMBLE\"\ group=\"Extension\ and\ Refinement\"/val0=\"$pvs\"\ display=\"P\ Value\ Cutoff\ Threshold\"\ tab=\"ASSEMBLE\"\ group=\"Extension\ and\ Refinement\"/" -e "s/val0=\"0.6\"\ display=\"Maximum\ backbone\ intensity\"/val0=\"$maxIntensity\"\ display=\"Maximum\ backbone\ intensity\"/" "$outDir/optArguments_new.xml"
	else
		if [[ "$enzy" == 'yes' ]]; then
			if [[ -s "$ref" ]]; then 
				if [[ -z "$labD" ]]; then 
					echo -e "\nOops! Please specify the label density (-a) for your reference!\n"; exit 1;
				else
					pv=`awk "BEGIN {print 3e-5/$gs/1000/$labD}"`
					pvs=`awk "BEGIN {print $pv/10}"`
                    sed -i -e "s/val0=\"120\"\ display=\"Molecule\ Length\ Threshold/val0=\"$len\"\ display=\"Molecule\ Length\ Threshold/" -e "s/val0=\"9\"\ display=\"Min\ Labels\ per\ molecule\"/val0=\"$site\"\ display=\"Min\ Labels\ per\ molecule\"/" -e "s/\"-FP\"\ val0=\"2.0\"/\"-FP\"\ val0=\"$fp\"/" -e "s/\"-FN\"\ val0=\"0.10\"/\"-FN\"\ val0=\"$fn\"/" -e "s/\"-sd\"\ val0=\"0.0\"/\"-sd\"\ val0=\"$sd\"/" -e "s/\"-sr\"\ val0=\"0.03\"/\"-sr\"\ val0=\"$sr\"/" -e "s/\"-sf\"\ val0=\"0.12\"/\"-sf\"\ val0=\"$sf\"/" -e "s/val0=\"248\"/val0=\"$lm\"/" -e "s/val0=\"7.2\"/val0=\"$sm\"/" -e "s/val0=\"$pval\"\ display=\"P\ Value\ Cutoff\ Threshold\"\ tab=\"ASSEMBLE\"\ group=\"Initial\ Assembly\"/val0=\"$pv\"\ display=\"P\ Value\ Cutoff\ Threshold\"\ tab=\"ASSEMBLE\"\ group=\"Initial\ Assembly\"/" -e "s/val0=\"$pvals\"\ display=\"P\ Value\ Cutoff\ Threshold\"\ tab=\"ASSEMBLE\"\ group=\"Extension\ and\ Refinement\"/val0=\"$pvs\"\ display=\"P\ Value\ Cutoff\ Threshold\"\ tab=\"ASSEMBLE\"\ group=\"Extension\ and\ Refinement\"/" -e "s/val0=\"0.6\"\ display=\"Maximum\ backbone\ intensity\"/val0=\"$maxIntensity\"\ display=\"Maximum\ backbone\ intensity\"/" "$outDir/optArguments_new.xml"
				fi
			else
				sed -i -e "s/val0=\"120\"\ display=\"Molecule\ Length\ Threshold/val0=\"$len\"\ display=\"Molecule\ Length\ Threshold/" -e "s/val0=\"9\"\ display=\"Min\ Labels\ per\ molecule\"/val0=\"$site\"\ display=\"Min\ Labels\ per\ molecule\"/" -e "s/\"-FP\"\ val0=\"2.0\"/\"-FP\"\ val0=\"$fp\"/" -e "s/\"-FN\"\ val0=\"0.10\"/\"-FN\"\ val0=\"$fn\"/" -e "s/\"-sd\"\ val0=\"0.0\"/\"-sd\"\ val0=\"$sd\"/" -e "s/\"-sr\"\ val0=\"0.03\"/\"-sr\"\ val0=\"$sr\"/" -e "s/\"-sf\"\ val0=\"0.12\"/\"-sf\"\ val0=\"$sf\"/" -e "s/val0=\"248\"/val0=\"$lm\"/" -e "s/val0=\"7.2\"/val0=\"$sm\"/" -e "s/val0=\"0.6\"\ display=\"Maximum\ backbone\ intensity\"/val0=\"$maxIntensity\"\ display=\"Maximum\ backbone\ intensity\"/" "$outDir/optArguments_new.xml"
			fi
		fi    
    fi

    if [[ -z "$ref" ]];then
        python "$scriptsDir/Pipeline/1.0/pipelineCL.py" -R -w -d -U -T "$nthreads" -j "$njobs" -je "$njobs" -jp "$nthreads" -J "$njobs" -TJ "$nthreads" -Te "$nthreads" -Tp "$nthreads" -i "$iter" -B "$skip" -t "$toolsDir" -a "$outDir/optArguments_new.xml" -l "$outDir" -b "$bnx" >&1
    else
        if [[ -s "$ref" ]] && [[ -r "$ref" ]];then
            python "$scriptsDir/Pipeline/1.0/pipelineCL.py" -R -w -d -U -T "$nthreads" -j "$njobs" -je "$njobs" -jp "$nthreads" -J "$njobs" -TJ "$nthreads" -Te "$nthreads" -Tp "$nthreads" -i "$iter" -B "$skip" -t "$toolsDir" -a "$outDir/optArguments_new.xml" -l "$outDir" -b "$bnx" -r "$ref" >&1
        else
            echo "Oops! It seems the reference: '${ref}' is not existent or readable. Please check!"
        fi
    fi
    rm "$outDir/optArguments_new.xml"
    echo
    echo "## End date: `date`"
    echo "==============================================================================================================="
fi

##======================= Select "compare" flag =======================
##Print help if only select compare
if [[ $1 == "compare" ]] && [[ $# -eq 1 ]];then
    usage_compare;
    exit 0;
fi
##Select "compare" flag
if [[ $1 == "compare" ]] && [[ $# -gt 1 ]];then
    shift
    comp_options=':hR:r:q:z:o:p:t:m:';
    while getopts "$comp_options" opt; do
        case "$opt" in
            h) usage_compare; exit 0;;
            R) RefA=${OPTARG};;
            r) ref=${OPTARG};;
            q) qry=${OPTARG};;
            z) gs=${OPTARG};;
            o) outDir=${OPTARG};;
            p) name=${OPTARG};;
            t) maxthreads=${OPTARG};;
            m) maxmem=${OPTARG};;
            \?) echo -e "\nOops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` compare -h' and continue...\n"; exit 0;;
            :) echo -e "\nMissing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    #check mandatory options
    check_option "$RefA" -R usage_compare; check_option "$ref" -r usage_compare; check_option "$qry" -q usage_compare; check_option "$outDir" -o usage_compare; 
    check_option "$name" -p usage_compare; check_option "$maxthreads" -t usage_compare; check_option "$maxmem" -m usage_compare; check_option "$gs" -z usage_compare;

    RefA=`readlink -f "$RefA"`
    ref=`readlink -f "$ref"`; check_file "$ref";
    qry=`readlink -f "$qry"`; check_file "$qry";

    if [[ ! -s "$RefA" ]] || [[ ! -x "$RefA" ]];then
        echo -e "\nOops! It seems the Refaligner is not exsitent or executable. Plseae check!"
        echo -e "You may also download it from http://bnxinstall.com/solve/BionanoSolveInstall.html, and give an execuatble permission.\n"
        exit
    fi

    #check outDir
    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi
    if [[ "$outDir" == "." ]];then
        outDir="$PWD"
    elif [[ "${outDir: -2}" == ".." ]];then
        outDir="$PWD/$outDir"
        outDir_full="$outDir$name"
    fi

    check_path "$outDir"
    check_integer $maxthreads; check_integer $maxmem

    outDir_full="$outDir/$name"
    pv=`awk "BEGIN {print 1.0e-5/$gs}"`

    echo "========================================== comparison starts ============================================="
    echo "## Start date: `date`"
    echo "## The ref cmap file is: ${ref}"
    echo "## The qry cmap file is: ${qry}"
    echo "## The genome size (Mb) is: ${gs}"
    echo "## The Binano RefAligner is: ${RefA}"
    echo "## The maximum threads is: ${maxthreads}"
    echo "## The maximum RAM (Gb) is: ${maxmem}"
    echo "## The output file names are: ${outDir_full}*"
    echo
    "$RefA" -f -ref "$ref" -i "$qry" -o "$outDir_full" -maxthreads "$maxthreads" -output-veto-filter _intervals.txt$ -res 2.9 -FP 0.6 -FN 0.06 -sf 0.20 -sd 0.0 -sr 0.01 -extend 1 -outlier 0.0001 -endoutlier 0.001 -PVendoutlier -deltaX 12 -deltaY 12 -xmapchim 12 -hashgen 5 7 2.4 1.5 0.05 5.0 1 1 1 -hash -hashdelta 50 -mres 1e-3 -hashMultiMatch 100 -insertThreads 4 -nosplit 2 -biaswt 0 -T "$pv" -S -1000 -indel -PVres 2 -rres 0.9 -MaxSE 0.5 -HSDrange 1.0 -outlierBC -xmapUnique 12 -AlignRes 2. -outlierExtend 12 24 -Kmax 12 -f -maxmem "$maxmem" -BestRef 1 -stdout -stderr >&1
    echo
    echo "## End date: `date`"
    echo "========================================================================================================="
fi

##======================= Select "SV" flag =======================
##Print help if only select compare
if [[ $1 == "SV" ]] && [[ $# -eq 1 ]];then
    usage_sv;
    exit 0;
fi
##Select "SV" flag
if [[ $1 == "SV" ]] && [[ $# -gt 1 ]];then
    shift
    sv_options=':hr:P:H:M:e:c:E:q:s:R:z:t:o:b:';
    while getopts "$sv_options" opt; do
        case "$opt" in
            h) usage_sv; exit 0;;
            P) plt=${OPTARG};;
            H) hap=${OPTARG};;
            M) hum=${OPTARG};;
            e) enzy=${OPTARG};;
            c) cut=${OPTARG};;
            E) es=${OPTARG};;
            r) ref=${OPTARG};;
            q) qry=${OPTARG};;
            b) bed=${OPTARG};;
            s) scriptsDir=${OPTARG};;
            R) refA=${OPTARG};;
            z) gs=${OPTARG};;
            t) maxthreads=${OPTARG};;
            o) outDir=${OPTARG};;
            \?) echo -e "\nOops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` SV -h' and continue...\n"; exit 0;;
            :) echo -e "\nMissing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    #check mandatory options
    check_option "$ref" -r usage_sv; check_option "$scriptsDir" -s usage_sv; check_option "$refA" -R usage_sv; check_option "$gs" -z usage_sv;
    check_option "$outDir" -o usage_sv; check_option "$maxthreads" -t usage_sv; check_option "$qry" -q usage_sv;

    if [[ -z "$plt" ]]; then 
        plt=saphyr
	fi
	if [[ "$plt" != "irys" ]] && [[ "$plt" != "saphyr" ]]; then 
        echo -e "\nOops! Please using 'irys' or 'saphyr' after specifying '-p' option。\n"; exit 1;
    fi

    if [[ -z "$hap" ]]; then 
        hap=no
	fi
    check_yesno "$hap"
    
    if [[ -z "$hum" ]]; then 
        hum=no
	fi
    check_yesno "$hum"

    if [[ -z "$enzy" ]]; then 
        enzy=yes
	fi
    check_yesno "$enzy"

    if [[ -z "$cut" ]]; then 
        cut=yes
	fi
    check_yesno "$cut"

    if [[ -z "$es" ]]; then 
        es=yes
	fi
    check_yesno "$es"

    ref=`readlink -f "$ref"`
    check_file "$ref"

	qry=`readlink -f "$qry"`;
	check_file "$qry";

	refA=`readlink -f "$refA"`;
	check_file "$refA";

    last_chr_s="${scriptsDir: -1}" 
    if [[ "$last_chr_s" == "/" ]]; then
        scriptsDir="${scriptsDir%?}"
    fi
    if [[ "$scriptsDir" == "." ]];then
        scriptsDir="$PWD"
    elif [[ "${scriptsDir: -2}" == ".." ]];then
        scriptsDir="$PWD/$scriptsDir"
    fi
    if [[ ! -d "$scriptsDir" ]] || [[ ! -s "$scriptsDir"/Pipeline/1.0/runSV.py ]] || [[ ! -r "$scriptsDir" ]]; then
        echo -e "\nOops! It seems that the input Bionano Solve folder is not the original folder or not readable. Please check!"
        echo -e "You may also download it from https://bionanogenomics.com/support/software-downloads\n"
        exit 1
    fi

    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi
    if [[ "$outDir" == "." ]];then
        outDir="$PWD" 
    elif [[ "${outDir: -2}" == ".." ]];then
        outDir="$PWD/$outDir"
    fi

	check_path "$outDir"
	outDir="$outDir/SV"
	mkdir -p "$outDir"

    check_integer $gs; check_integer $maxthreads

    refADir=`dirname "$refA"`;
	cnt=`ls $refADir | grep -c xml`; 
	if [[ $cnt -ge 1 ]]; then 
        refADir=$refADir
	else
        cnt=`ls $refADir/../. | grep -c xml`;
		if [[ $cnt -ge 1 ]]; then 
            refADir="$refADir/.."
        else
            echo -e "\nOops! It seems that the input Bionano Solve folder is not the original folder or not readable. Please check!"
            echo -e "You may also download it from https://bionanogenomics.com/support/software-downloads\n"; exit 1;
		fi
	fi

	if [[ "$plt" == "irys" ]]; then 
        if [[ "$hap" == "yes" ]]; then 
            if [[ "$cut" == "yes" ]]; then
                xml="$refADir/optArguments_haplotype_irys.xml"
            else
                xml="$refADir/optArguments_haplotype_noCut_irys.xml"
			fi
        else
            if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
                xml="$refADir/optArguments_nonhaplotype_irys.xml"
            fi 
            if [[ "$cut" == "no" ]] && [[ "$es" == "yes" ]]; then
                xml="$refADir/optArguments_nonhaplotype_noCut_irys.xml"
            fi 
            if [[ "$cut" == "yes" ]] && [[ "$es" == "no" ]]; then
                xml="$refADir/optArguments_nonhaplotype_noES_irys.xml"
            fi    
            if [[ "$cut" == "no" ]] && [[ "$es" == "no" ]]; then
                xml="$refADir/optArguments_nonhaplotype_noES_noCut_irys.xml"
            fi  
        fi
    else
        if [[ "$hum" == "yes" ]]; then 
            if [[ "$hap" == "yes" ]]; then 
                if [[ "$enzy" == "yes" ]]; then 
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_haplotype_DLE1_saphyr_human.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_haplotype_noCut_DLE1_saphyr_human.xml"
					fi
				else
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_haplotype_saphyr_human.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_haplotype_noCut_saphyr_human.xml"
					fi
				fi
			else
                if [[ "$enzy" == "yes" ]]; then 
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_nonhaplotype_DLE1_saphyr_human.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_nonhaplotype_noCut_DLE1_saphyr_human.xml"
					fi
					if [[ "$es" == "no" ]]; then
						xml="$refADir/optArguments_nonhaplotype_noES_DLE1_saphyr_human.xml"
					fi					
				else
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_nonhaplotype_saphyr_human.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_nonhaplotype_noCut_saphyr_human.xml"
					fi
				fi							                    
			fi
		else
            if [[ "$hap" == "yes" ]]; then 
                if [[ "$enzy" == "yes" ]]; then 
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_haplotype_DLE1_saphyr.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_haplotype_noCut_DLE1_saphyr.xml"
					fi
				else
					if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
						xml="$refADir/optArguments_haplotype_saphyr.xml"
					fi
					if [[ "$cut" == "no" ]]; then
						xml="$refADir/optArguments_haplotype_noCut_saphyr.xml"
					fi
				fi
			else
                if [[ "$enzy" == "yes" ]]; then 
				    if [[ $gs -le $bg ]]; then 
						if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
							xml="$refADir/optArguments_nonhaplotype_DLE1_saphyr.xml"
						fi
						if [[ "$cut" == "no" ]] && [[ "$es" == "yes" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noCut_DLE1_saphyr.xml"
						fi
						if [[ "$cut" == "yes" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_DLE1_saphyr.xml"
						fi		
						if [[ "$cut" == "no" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_noCut_DLE1_saphyr.xml"
						fi
					else
						if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
							xml="$refADir/optArguments_nonhaplotype_BG_DLE1_saphyr.xml"
						fi
						if [[ "$cut" == "no" ]] && [[ "$es" == "yes" ]]; then
							echo -e "\nOops! We don't support noCut with extent and split\n"; exit 1;
						fi
						if [[ "$cut" == "yes" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_BG_DLE1_saphyr.xml"
						fi		
						if [[ "$cut" == "no" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_noCut_BG_DLE1_saphyr.xml"
						fi						
					fi			
				else
					if [[ $gs -le $bg ]]; then 
						if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
							xml="$refADir/optArguments_nonhaplotype_saphyr.xml"
						fi
						if [[ "$cut" == "no" ]] && [[ "$es" == "yes" ]];then
							xml="$refADir/optArguments_nonhaplotype_noCut_saphyr.xml"
						fi
						if [[ "$cut" == "yes" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_saphyr.xml"
						fi		
						if [[ "$cut" == "no" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_noCut_saphyr.xml"
						fi
					else
						if [[ "$cut" == "yes" ]] && [[ "$es" == "yes" ]]; then
							xml="$refADir/optArguments_nonhaplotype_BG_saphyr.xml"
						fi
						if [[ "$cut" == "no" ]] && [[ "$es" == "yes" ]];then
							xml="$refADir/optArguments_nonhaplotype_noCut_BG_saphyr.xml"
						fi
						if [[ "$cut" == "yes" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_BG_saphyr.xml"
						fi		
						if [[ "$cut" == "no" ]] && [[ "$es" == "no" ]]; then
							xml="$refADir/optArguments_nonhaplotype_noES_noCut_BG_saphyr.xml"
						fi
					fi
				fi							                    
			fi
        fi
    fi

    mkdir -p "$outDir"/TMP
    pv=`awk "BEGIN {print 1.0e-5/$gs}"`

    echo "========================================= SV detection starts ========================================"
    echo "## Start date: `date`"
    echo "## The data generation platform is: ${plt}"
    echo "## The ref cmap file is: ${ref}"
    echo "## The qry cmap is: ${qry}"
    echo "## The genome size is (Mb): ${gs}"
    echo "## The Bionano RefAligner is: ${refA}"
    echo "## The path to Bionano Solve folder is: ${scriptsDir}"
    echo "## The xml file used is: ${xml}"
    echo "## The maximum threads is: ${maxthreads}"
    echo "## The output directory is: ${outDir}"
	echo

    "$refA" -ref "$ref" -i "$qry" -o "$outDir"/TMP/tmp -stdout -stderr -maxthreads "$maxthreads" -output-veto-filter _intervals.txt$ -res 2.9 -FP 0.6 -FN 0.06 -sf 0.20 -sd 0.0 -sr 0.01 -extend 1 -outlier 0.0001 -endoutlier 0.001 -PVendoutlier -deltaX 12 -deltaY 12 -xmapchim 12 5000 -hashgen 5 7 2.4 1.5 0.05 5.0 1 1 3 -hash -hashdelta 50 10 -hashMultiMatch 100 10 -insertThreads 4 -nosplit 2 -biaswt 0 -T "$pv" -S -1000 -indel -PVres 2 -rres 0.9 -MaxSE 0.5 -MinSF 0.15 -HSDrange 1.0 -outlierBC -outlierLambda 20.0 -outlierType1 0 -xmapUnique 12 -AlignRes 2. -outlierExtend 12 24 -Kmax 12 -resEstimate -M 3 -f -maxvirtmem 0 -maxmem 120 -BestRef 1 -BestRefPV 1

    if [[ -z "$bed" ]];then
        echo
        python "$scriptsDir"/Pipeline/1.0/runSV.py -t "$refA" -r "$ref" -q "$qry" -o "$outDir" -p "$scriptsDir/Pipeline/1.0" -E "$outDir"/TMP/tmp.errbin -a "$xml" -T "$maxthreads" >&1
    else
        bed=`readlink -f "$bed"`
        echo "## The bed file is: ${bed}"
        if [[ -s "$bed" ]] && [[ -r "$bed" ]]; then
            echo
            python "$scriptsDir"/Pipeline/1.0/runSV.py -t "$refA" -r "$ref" -q "$final" -o "$outDir" -p "$scriptsDir/Pipeline/1.0" -E "$outDir"/TMP/tmp.errbin -b "$bed" -a "$xml" -T "$maxthreads" >&1
        else
            echo -e "\nOops! It seems the bed file: '${bed}' is not existent or readable. Please check!"
        fi
    fi

    rm -rf "$outDir"/TMP
    echo -e "\n## End date: `date`"
    echo "====================================================================================================="
fi

##======================= Select "hybrid" flag =======================
##Print help if only select hybrid
if [[ $1 == "hybrid" ]] && [[ $# -eq 1 ]];then
    usage_hybrid;
    exit 0;
fi
##Select "hybrid" flag
if [[ $1 == "hybrid" ]] && [[ $# -gt 1 ]];then
    shift
    hy_options=':hs:R:r:b:m:l:e:B:N:x:f:c:u:g:d:p:o:t:M:';
    while getopts "$hy_options" opt; do
        case "$opt" in
            h) usage_hybrid; exit 0;;
            s) scriptsDir=${OPTARG};;
            R) toolsDir=${OPTARG};;
            r) NGS=${OPTARG};;
            b) bnx=${OPTARG};;
            m) minLen=${OPTARG};;
            l) minEnzy=${OPTARG};;
            e) enzyme=${OPTARG};;
            B) BNGf=${OPTARG};;
            N) NGSf=${OPTARG};;
            x) xml=${OPTARG};;
            f) final=${OPTARG};;
            c) intial=${OPTARG};;
            u) chimeric=${OPTARG};;
            g) merge=${OPTARG};;
            d) dis=${OPTARG};;
            p) ptg=${OPTARG};;
            o) outDir=${OPTARG};;
            t) maxthreads=${OPTARG};;
            M) maxmem=${OPTARG};;
            \?) echo;echo -e "Oops! Unknown option -$OPTARG">&2; echo "Please check '`basename $0` hybrid -h' and continue...";echo; exit 0;;
            :) echo;echo -e "Missing option argument for -$OPTARG">&2; echo; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

    check_option "$scriptsDir" -s usage_hybrid; check_option "$toolsDir" -R usage_hybrid; check_option "$bnx" -b usage_hybrid; check_option "$NGS" -r usage_hybrid;
	check_option "$BNGf" -B usage_hybrid; check_option "$NGSf" -N usage_hybrid; check_option "$xml" -x usage_hybrid; check_option "$final" -f usage_hybrid; 
	check_option "$outDir" -o usage_hybrid; check_option "$maxthreads" -t usage_hybrid; check_option "$maxmem" -M usage_hybrid; 

    if [[ -z "$minLen" ]];then
        minLen=0
    fi
    if [[ -z "$minEnzy" ]]; then
        minEnzy=0
    fi
    if [[ -z "$enzyme" ]]; then
        enzyme=DLE1
    fi
    if [[ -z "$intial" ]]; then
        intial=1e-10
    fi
    if [[ -z "$chimeric" ]];then
        chimeric=1e-11
    fi
    if [[ -z "$merge" ]];then
        merge=1e-13
    fi
    if [[ -z "$dis" ]]; then
        dis=10000
    else
        dis=`awk '{print $1*$2}' <<<"$dis 1000"`
    fi
    if [[ -z "$ptg" ]];then
        ptg=35
    fi

    NGS=`readlink -f "$NGS"`; check_file "$NGS"
    bnx=`readlink -f "$bnx"`; check_file "$bnx"
    final=`readlink -f "$final"`; check_file "$final"
	xml=`readlink -f "$xml"`; check_file "$xml"
	

    last_chr_t="${toolsDir: -1}"
    if [[ "$last_chr_t" == "/" ]]; then
        toolsDir="${toolsDir%?}"
    fi
    if [[ "$toolsDir" == "." ]];then
        toolsDir="$PWD"
    elif [[ "${toolsDir: -2}" == ".." ]];then
        toolsDir="$PWD/$toolsDir"
    fi
    RefA="$toolsDir"/RefAligner

    if [[ ! -d "$toolsDir" ]] || [[ ! -x "$toolsDir"/RefAligner ]] || [[ ! -x "$toolsDir"/Assembler ]]; then
        echo -e "\nOops! It seems the RefAligner folder is not the original folder from Bionano Genomics or it is not executable. Please check!"
        echo -e "You may also download it from https://bionanogenomics.com/support/software-downloads\n"
        exit 1
    fi

    last_chr_s="${scriptsDir: -1}"
    if [[ "$last_chr_s" == "/" ]]; then
        scriptsDir="${scriptsDir%?}"
    fi
    if [[ "$scriptsDir" == "." ]];then
        scriptsDir="$PWD"
    elif [[ "${scriptsDir: -2}" == ".." ]];then
        scriptsDir="$PWD/$scriptsDir"
    fi

    if [[ ! -d "$scriptsDir" ]] || [[ ! -s "$scriptsDir"/HybridScaffold/1.0/hybridScaffold_config.xml ]] || [[ ! -r "$scriptsDir"/HybridScaffold/1.0/hybridScaffold.pl ]]; then
        echo -e "\nOops! It seems that the Bionano Solve folder is not the original scripts folder from Bionano Genomics or all inside in not readable. Please check!"
        echo -e "You may also download it from https://bionanogenomics.com/support/software-downloads\n"
        exit 1
    fi

    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi

    if [[ "$outDir" == "." ]];then
        outDir="$PWD"
    elif [[ "${outDir: -2}" == ".." ]];then
        outDir="$PWD/$outDir"
    fi

	check_path "$outDir"

    check_integer $maxthreads; check_integer $maxmem

    echo "========================================= Hybrid pipeline starts ========================================"
    echo "## Start date: `date`"
    echo "## The path to Bionano Solve is: ${scriptsDir}"
    echo "## The path to Bionano RefAligner foler is: ${toolsDir}"
    echo "## The NGS reference is: ${NGS}"
    echo "## The raw molecule map file is: ${bnx}"
    echo "## The minimum molecule length (Kb) is: ${minLen}"
    echo "## The minimum number of selected enzyme in molecule is: ${minEnzy}"
    echo "## The enzyme is: ${enzyme}"
    echo "## Bionano conflict filter level is: ${BNGf}"
    echo "## NGS conflict filter level is: ${NGSf}"
    echo "## The estimated genome size (Mb) is: ${gs}"
    echo "## The final assembled cmap file is: ${final}"
    echo "## Minimum confidence value to output intial alignments: ${intial}"
    echo "## Minimum confidence value used to flag chimeric/conflicting alignments: ${chimeric}"
    echo "## Minimum confidence value used to merge alignments: ${merge}"
    echo "## The distance (bp) from a conflicting site within which the chimeric quality score of Bionano genome map labels will be examined: ${dis}"
    echo "## The minimal percentage (%) of molecules spanning to the left and right of a label of interest: ${ptg}"
    echo "## The maximum number of threads or CPUs is: ${maxthreads}"
    echo "## The maximum number of RAM (Gb) is: ${maxmem}"
    echo "## The output directory is: ${outDir}"
    echo 

    if [[ `echo "$enzyme" | grep -qi '^DLE1$' && echo "yes" || echo "no"` == "yes" ]];then
		enzyme=DLE1
		cp -f "$scriptsDir"/HybridScaffold/1.0/hybridScaffold_DLE1_config.xml "$outDir"/../hybridScaffold_config_new.xml
		merge=1e-11
	else
		cp -f "$scriptsDir"/HybridScaffold/1.0/hybridScaffold_config.xml "$outDir"/../hybridScaffold_config_new.xml
		merge=1e-13
	fi	
  
    RefAA=`echo "$RefA" | sed "s/\//::::/g"`

    sed -i -e "s/\"refaligner\"\ val0=\"\~\/tools\/RefAligner\"/\"refaligner\"\ val0=\"$RefAA\"/" -e "s/val0=\"CTTAAG\"/val0=\"${enzyme}\"/" -e "s/\"minLength\"\ val0=\"0\"/\"minLength\"\ val0=\"${minLen}\"/" -e "s/\"minLabels\"\ val0=\"0\"/\"minLabels\"\ val0=\"${minEnzy}\"/" -e "s/\"maxmem\"\ val0=\"128\"/\"maxmem\"\ val0=\"${maxmem}\"/" -e "s/\"maxthreads\"\ val0=\"64\"/\"maxthreads\"\ val0=\"${maxthreads}\"/" "$outDir"/../hybridScaffold_config_new.xml
    sed -i -e "s/::::/\//g" "$outDir"/../hybridScaffold_config_new.xml
    Lintial=`grep -n "Initial alignment" "$outDir"/../hybridScaffold_config_new.xml | cut -d":" -f1`
    for line in $Lintial; do 
        sed -i "${line}s/1e-10/$intial/" "$outDir"/../hybridScaffold_config_new.xml
    done
    sed -i -e "s/\"T_cutoff\"\ val0=\"1e-11\"/\"T_cutoff\"\ val0=\"$chimeric\"/" -e "s/\"window_size\"\ val0=\"10000\"/\"window_size\"\ val0=\"$dis\"/" -e "s/\"merge_Tvalue\"\ val0=\"1e-11\"/\"merge_Tvalue\"\ val0=\"$merge\"/" -e "s/val0=\"35\"\ display=\"Percent/val0=\"$ptg\"\ display=\"Percent/" "$outDir"/../hybridScaffold_config_new.xml
    perl "$scriptsDir"/HybridScaffold/1.0/hybridScaffold.pl -f -B "$BNGf" -N "$NGSf" -r "$RefA" -n "$NGS" -b "$final" -c "$outDir"/../hybridScaffold_config_new.xml -o "$outDir" -x -m "$bnx" -p "$scriptsDir/Pipeline/1.0" -q "$xml"
    rm -f "$outDir"/../hybridScaffold_config_new.xml

    echo "## End date: `date`"
    echo "=========================================================================================================="
fi

##======================= Select "dual" flag =======================
##Print help if only select "dual"
if [[ $1 == "dual" ]] && [[ $# -eq 1 ]]; then
    usage_dual;
    exit 0;
fi

if [[ $1 == "dual" ]] && [[ $# -gt 1 ]]; then
    shift
    dual_options=':hs:R:1:2:e:E:o:n:';
    while getopts "$dual_options" opt; do
        case "$opt" in
            h) usage_dual; exit 0;;
            R) refA=${OPTARG};;
			n) ngs=${OPTARG};;
            o) outDir=${OPTARG};;
            e) enz1=${OPTARG};;
            E) enz2=${OPTARG};;
            1) cmap1=${OPTARG};;
            2) cmap2=${OPTARG};;
            s) scriptsDir=${OPTARG};;
            \?) echo -e "\nOops! Unknown option -$OPTARG">&2; echo -e "Please check '`basename $0` dual' and continue...\n"; exit 1;;
            :) echo -e "\nMissing option argument for -$OPTARG\n">&2; exit 1;;
        esac
    done
    shift "$((OPTIND - 1))"

	check_option "$scriptsDir" -s usage_dual; check_option "$refA" -R usage_dual; check_option "$cmap1" -1 usage_dual; check_option "$cmap2" -2 usage_dual; 
	check_option "$enz1" -e usage_dual; check_option "$enz2" -E usage_dual; check_option "$ngs" -n usage_dual; check_option "$outDir" -o usage_dual; 

    last_chr_s="${scriptsDir: -1}"
    if [[ "$last_chr_s" == "/" ]]; then
        scriptsDir="${scriptsDir%?}"
    fi
    if [[ "$scriptsDir" == "." ]];then
        scriptsDir="$PWD"
    elif [[ "${scriptsDir: -2}" == ".." ]];then
        scriptsDir="$PWD/$scriptsDir"
    fi

    if [[ ! -d "$scriptsDir" ]] || [[ ! -s "$scriptsDir"/HybridScaffold/1.0/runTGH.R ]] || [[ ! -r "$scriptsDir"/HybridScaffold/1.0/runTGH.R ]]; then
        echo -e "\nOops! It seems that the Bionano Solve folder is not the original scripts folder from Bionano Genomics or all inside in not readable. Please check!"
        echo -e "You may also download it from https://bionanogenomics.com/support/software-downloads\n"
        exit 1
    fi	

	refA=`readlink -f $refA`; check_file "$refA"
	cmap1=`readlink -f $cmap1`; check_file "$cmap1"
	cmap2=`readlink -f $cmap2`; check_file "$cmap2"
	ngs=`readlink -f $ngs`; check_file "$ngs"

	enz1=`check_enz $enz1`; 
    enz2=`check_enz $enz2`;

    last_chr="${outDir: -1}"
    if [[ "$last_chr" == "/" ]]; then
        outDir="${outDir%?}"
    fi

    if [[ "$outDir" == "." ]];then
        outDir="$PWD"
    elif [[ "${outDir: -2}" == ".." ]];then
        outDir="$PWD/$outDir"
    fi

	check_path "$outDir"

	if [[ $enz1 == $enz2 ]]; then 
	    echo -e "\nOops! The enzyme names input are the same. Please check!\n"
		exit 1;
	fi

	if [[ $enz1 != "DLE1" ]] && [[ $enz2 != "DLE1" ]]; then
		xml="$scriptsDir"/HybridScaffold/1.0/TGH/hybridScaffold_two_enzymes.xml
	else
		xml="$scriptsDir"/HybridScaffold/1.0/TGH/hybridScaffold_two_enzymes_DLE1.xml
	fi

    echo "========================================= dual hybrid scaffolding starts ========================================"
    echo "## Start date: `date`"
    echo "## The path to Bionano Solve is: ${scriptsDir}"
    echo "## The path to Bionano RefAligner foler is: ${refA}"
    echo "## The NGS reference is: ${ngs}"
    echo "## The enzyme 1 is: ${enz1}"
	echo "## The enzyme 2 is: ${enz2}"
    echo "## full path to the denovo assembled cmap file by the first enzyme: ${cmap1}"
    echo "## full path to the denovo assembled cmap file by the second enzyme: ${cmap2}"
    echo "## The output directory is: ${outDir}"
	echo

	check_tool Rscript;
	Rscript "$scriptsDir"/HybridScaffold/1.0/runTGH.R --BNGPath1 "$cmap1" --BNGPath2 "$cmap2" --NGSPath "$ngs" --OutputDir "$outDir" --Enzyme1 $enz1 --Enzyme2 "$enz2" --RefAlignerPath "$refA" "$xml"

    echo "## End date: `date`"
    echo "=========================================================================================================="
fi

### END SCRIPT
